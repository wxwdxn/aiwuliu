/**
 * 版权所有：版权所有(C) 2015
 * 文件名称：LogisticsCompanyController.java
 * 系统编号: Z0001002
 * 系统名称：物流管理平台
 * 模块编号：
 * 模块名称：
 * 设计文件：
 * 完成日期：2017-01-18
 * 作    者: YK
 * 内容摘要：
 */
package com.cn.gazelle.logistics.controller.operationController;

import com.cn.gazelle.logistics.pojo.T_Data_Company;
import com.cn.gazelle.logistics.pojo.T_Data_JsonResult;
import com.cn.gazelle.logistics.pojo.T_Data_Truck;
import com.cn.gazelle.logistics.service.CompanyService;
import com.cn.gazelle.logistics.service.TruckService;
import com.cn.gazelle.logistics.util.*;
import com.cn.gazelle.logistics.util.message.base.LogUtil;
import com.cn.gazelle.logistics.util.message.base.MessageUtil;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * 类 名 称：LogisticsCompanyController
 * 内容描述：
 * 方法描述：该类有 个方法
 * 01
 * 02
 *
 * @authot YK
 */
@Controller
@RequestMapping(value = "/logisticsCompanyManager")
public class LogisticsCompanyController {
    Logger logger = Logger.getLogger(LogisticsCompanyController.class);
    @Value("#{setting[baseUrl]}")
    private String baseUrl;
    @Resource
    private CompanyService companyService;
    @Resource
    private TruckService  truckService;

    /**
     * 方法名称：companyManager_home
     * 内容摘要：物流公司管理页面。
     *
     * @param model model
     * @return string 物流公司管理页面
     */
    @RequestMapping(value = "home")
    public String companyManager_home(ModelMap model) {
        return "operationManager/logisticsInfoManager/logisticsInfoManager";
    }

    /**
     * 方法名称：companyManagerList
     * 内容摘要：物流公司管理页面列表。
     *
     * @param model model
     * @return string 物流公司管理页面列表
     */
    @RequestMapping(value = "companyManagerList")
    @ResponseBody
    public List<T_Data_Company> vehicleEquipManagerList(@RequestParam(required = false, defaultValue = "") String company_name,
                                                        @RequestParam(required = false, defaultValue = "") String contact_name,
                                                        @RequestParam(required = false, defaultValue = "") String contact_mobile_phone,
                                                        @RequestParam(required = false, defaultValue = "") String business_licence,
                                                        @RequestParam(required = false, defaultValue = "") String city_id,
                                                        HttpServletRequest request, HttpServletResponse response, ModelMap model) {
        logger.info("company_name = " + company_name + ";" + "contact_name = " + contact_name + ";" +
                "contact_mobile_phone = " + contact_mobile_phone + ";" + "business_licence = " + business_licence + ";"
                + "city_id = " + city_id + ";");
        List<T_Data_Company> companyList = null;
        try {
            companyList = this.companyService.queryCompanyList(company_name, contact_name, contact_mobile_phone, business_licence,city_id);
        } catch (Exception e) {
            logger.error(LogUtil.searchErr + e.getMessage());
            e.printStackTrace();
        }
        logger.info("companyList=======>" + JSONUtil.toJSONString(companyList));
        return companyList;
    }
    
    /**
     * 方法名称:getCompanyId
     * 方法描述：获取公司id
     * @return String
     */
    @RequestMapping(value = "getCompanyId")
    @ResponseBody
    public Map getCompanyId(){
        String company_id = null;
        Map result = new HashMap();
        try {
            result = new HashMap();
            company_id = UUIDUtil.getUUID();
            result.put("company_id",company_id);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    /**
     * 方法名称: 保存公司信息
     * 方法描述：saveCompanyInfo
     *
     * @param request
     * @param response
     * @param model
     * @return T_Data_JsonResult
     */
    @RequestMapping(value = "saveCompanyInfo")
    @ResponseBody
    public T_Data_JsonResult saveCompanyInfo(@RequestParam("add_business_licence_pic_id") MultipartFile business_licence_pic,
                                             @RequestParam("add_store_pic_id") MultipartFile store_pic, HttpServletRequest request,
                                             HttpServletResponse response, HttpSession session,
                                             ModelMap model) {
        T_Data_JsonResult jsonResult = new T_Data_JsonResult();
        // 页面传递的数据
        String companyInfo = request.getParameter("companyInfo");
        logger.info("companyInfo==="+companyInfo);
        String domainPath = request.getSession().getServletContext().getRealPath("/");
        domainPath = domainPath.substring(0, domainPath.lastIndexOf(File.separator));
        domainPath = domainPath.substring(0, domainPath.lastIndexOf(File.separator));
        String baseUrl = domainPath + File.separator + this.baseUrl;
        String business_licence_Type = null;
        String store_pic_Type = null;
        String licence_path = null;
        String store_path = null;
        int flag = 0;
        try {
            File fileUp = new File(baseUrl + "/CompanyPic");
            if (!business_licence_pic.isEmpty() && !store_pic.isEmpty()) {
                String[] splitLicence = (business_licence_pic.getOriginalFilename()).split("\\.");
                business_licence_Type = splitLicence[1];
                String[] splitStore = (store_pic.getOriginalFilename()).split("\\.");
                store_pic_Type = splitStore[1];
                if (!fileUp.exists()) {
                    fileUp.mkdirs();
                } else {
                    licence_path = "/CompanyPic/" + RadomUtil.getOrderNo() + "." + business_licence_Type;
                    store_path = "/CompanyPic/" + RadomUtil.getOrderNo() + "." + store_pic_Type;
                    logger.info(business_licence_pic.getOriginalFilename());
                    logger.info(store_pic.getOriginalFilename());
                    // 上传
                    business_licence_pic.transferTo(new File(baseUrl + licence_path));
                    store_pic.transferTo(new File(baseUrl + store_path));
                }
            }
            flag = companyService.saveCompanyInfo(companyInfo, "U:" + request.getSession().getAttribute("username"),
                    licence_path, store_path);
            jsonResult.setResult(flag);
        } catch (Exception e) {
            logger.info(MessageUtil.saveInfoError + e.getMessage());
            flag = Integer.parseInt(e.getMessage());
            jsonResult.setResult(flag);
        }
        logger.info("flag=" + flag);
        return jsonResult;
    }

    /**
     * 方法名称：getCompanyInfo
     * 内容摘要：运营页面OBD物流公司管理点击表格获取详情
     *
     * @param request  request
     * @param response response
     * @param model    model
     */
    @ResponseBody
    @RequestMapping(value = "/getCompanyInfo")
    public T_Data_Company getOBDTruckBindingInfo(String company_id, HttpServletRequest request,
                                                 HttpServletResponse response, ModelMap model) {
        logger.info("company_id============>" + company_id);
        T_Data_Company company = null;
        try {
            company = this.companyService.findCompanyDetailByID(company_id);
        } catch (Exception e) {
            logger.error(LogUtil.searchErr + e.getMessage());
        }
        logger.info("company================>" + JSONUtil.toJSONString(company));
        return company;
    }

    /**
     * 方法名称:editCompanyInfo
     * 方法描述：编辑物流公司信息
     * @param
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/editCompanyInfo")
    public T_Data_JsonResult editCompanyInfo( HttpServletRequest request,HttpServletResponse response,
                                               HttpSession session, ModelMap model){
        T_Data_JsonResult jsonResult = new T_Data_JsonResult();
        String licence_path = null;
        String store_path = null;
        int flag = 0;
        // 页面传递的数据
        String companyInfo = request.getParameter("companyInfo");
        try {
            flag = companyService.editCompanyInfo(companyInfo, "U:" + request.getSession().getAttribute("username"),
                    licence_path, store_path);
            jsonResult.setResult(flag);
        } catch (Exception e) {
            logger.info(MessageUtil.saveInfoError + e.getMessage());
            flag = Integer.parseInt(e.getMessage());
            jsonResult.setResult(flag);
        }
        logger.info("flag=" + flag);
        return jsonResult;

    }

    /**
     * 方法名称:saveTruckInfo
     * 方法描述：保存物流公司的卡车信息
     *
     * @return
     */
    @RequestMapping(value = "saveTruckInfo")
    @ResponseBody
    public T_Data_JsonResult saveTruckInfo(@RequestParam("driving_licence_first_page_save_path") MultipartFile driving_licence_first_page,
                                           @RequestParam("driving_licence_second_page_save_path") MultipartFile driving_licence_second_page,
                                           @RequestParam("truck_first_pic_save_path") MultipartFile truck_first_pic,
                                           @RequestParam("truck_second_pic_save_path") MultipartFile truck_second_pic,
                                           @RequestParam("truck_third_pic_save_path") MultipartFile truck_third_pic,
                                           HttpServletRequest request, HttpServletResponse response, HttpSession session,
                                           ModelMap model) {
        T_Data_JsonResult jsonResult = new T_Data_JsonResult();
        String truckInfo = request.getParameter("truckInfo");
        String company_id = request.getParameter("company_id");
        String domainPath = request.getSession().getServletContext().getRealPath("/");
        domainPath = domainPath.substring(0, domainPath.lastIndexOf(File.separator));
        domainPath = domainPath.substring(0, domainPath.lastIndexOf(File.separator));
        String baseUrl = domainPath + File.separator + this.baseUrl;
        String driving_licence_first_page_save_path = null;
        String driving_licence_second_page_save_path = null;
        String truck_first_pic_save_path = null;
        String truck_second_pic_save_path = null;
        String truck_third_pic_save_path = null;
        HashMap picPathMap = new HashMap();
        int flag = 0;

        try {
            File fileUp = new File(baseUrl + "/TruckPic");
            if (!driving_licence_first_page.isEmpty() && !driving_licence_second_page.isEmpty() &&
                    !truck_first_pic.isEmpty() && !truck_second_pic.isEmpty() && !truck_third_pic.isEmpty()) {
                // 驾驶证第一页
                String[] split_driving_licence_first_page = (driving_licence_first_page.getOriginalFilename()).split("\\.");
                String driving_licence_first_page_type = split_driving_licence_first_page[1];
                // 驾驶证第二页
                String[] split_driving_licence_second_page = (driving_licence_second_page.getOriginalFilename()).split("\\.");
                String driving_licence_second_page_type = split_driving_licence_second_page[1];
                // 车辆照片1（左侧面）
                String[] split_truck_first_pic = (truck_first_pic.getOriginalFilename()).split("\\.");
                String truck_first_pic_type = split_truck_first_pic[1];
                // 车辆照片2（右侧面）
                String[] split_truck_second_pic = (truck_second_pic.getOriginalFilename()).split("\\.");
                String truck_second_pic_type = split_truck_second_pic[1];
                // 车辆照片3（正后面）
                String[] split_truck_third_pic = (truck_third_pic.getOriginalFilename()).split("\\.");
                String truck_third_pic_type = split_truck_third_pic[1];
                if (!fileUp.exists()) {
                    fileUp.mkdirs();
                } else {
                    // 驾驶证第一页
                    driving_licence_first_page_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + driving_licence_first_page_type;
                    // 驾驶证第二页
                    driving_licence_second_page_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + driving_licence_second_page_type;
                    // 车辆照片1（左侧面）
                    truck_first_pic_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + truck_first_pic_type;
                    // 车辆照片2（右侧面）
                    truck_second_pic_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + truck_second_pic_type;
                    // 车辆照片3（正后面）
                    truck_third_pic_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + truck_third_pic_type;
                    // 上传
                    driving_licence_first_page.transferTo(new File(baseUrl + driving_licence_first_page_save_path));
                    driving_licence_second_page.transferTo(new File(baseUrl + driving_licence_second_page_save_path));
                    truck_first_pic.transferTo(new File(baseUrl + truck_first_pic_save_path));
                    truck_second_pic.transferTo(new File(baseUrl + truck_second_pic_save_path));
                    truck_third_pic.transferTo(new File(baseUrl + truck_third_pic_save_path));
                    // 将照片路径封装到picPath对象中
                    picPathMap.put("driving_licence_first_page_save_path",driving_licence_first_page_save_path);
                    picPathMap.put("driving_licence_second_page_save_path",driving_licence_second_page_save_path);
                    picPathMap.put("truck_first_pic_save_path",truck_first_pic_save_path);
                    picPathMap.put("truck_second_pic_save_path",truck_second_pic_save_path);
                    picPathMap.put("truck_third_pic_save_path",truck_third_pic_save_path);
                }
                flag = this.companyService.saveTruckInfo(truckInfo,"U:" + request.getSession().getAttribute("username"),picPathMap,company_id);
                jsonResult.setResult(flag);
            }
        } catch (Exception e) {
            logger.info(MessageUtil.saveInfoError + e.getMessage());
            flag = Integer.parseInt(e.getMessage());
            jsonResult.setResult(flag);
        }
        logger.info("flag=" + flag);
        return jsonResult;
    }
    /**
     * 方法名称: findTruckListOfCompany
     * 方法描述：物流公司下的车辆列表
     * @return
     */
//    @RequestMapping(value = "findTruckListOfCompany")
//    @ResponseBody
//    public List<T_Data_Truck> findTruckListOfCompany(@RequestParam("company_id") String company_id,
//                                                     HttpServletRequest request, HttpServletResponse response, HttpSession session,
//                                                     ModelMap model){
//        List<T_Data_Truck> truckList = null;
//        try {
//            truckList = this.truckService.findTruckByOwnerMemberID(company_id);
//            logger.info(MessageUtil.seacheInfo);
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error(e.getMessage() + MessageUtil.seacheInfoError);
//        }
//        return truckList;
//    }

}

