/**
 * 版权所有：版权所有(C) 2015
 * 文件名称：LogisticsVehicleController.java
 * 系统编号: Z0001002
 * 系统名称：物流管理平台
 * 模块编号：
 * 模块名称：
 * 设计文件：
 * 完成日期：2017-03-02
 * 作    者: QJ
 * 内容摘要：
 */
package com.cn.gazelle.logistics.controller.operationController;

import com.cn.gazelle.logistics.pojo.T_Data_Company_Vehicle_Driver;
import com.cn.gazelle.logistics.pojo.T_Data_JsonResult;
import com.cn.gazelle.logistics.pojo.T_Data_Logistics_Vehicle;
import com.cn.gazelle.logistics.pojo.T_Data_Truck;
import com.cn.gazelle.logistics.service.CompanyService;
import com.cn.gazelle.logistics.service.TruckService;
import com.cn.gazelle.logistics.service.VehicleService;
import com.cn.gazelle.logistics.util.JSONUtil;
import com.cn.gazelle.logistics.util.RadomUtil;
import com.cn.gazelle.logistics.util.ResponseUtil;
import com.cn.gazelle.logistics.util.message.TruckManager_Message;
import com.cn.gazelle.logistics.util.message.base.MessageUtil;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * 类 名 称：LogisticsVehicleController
 * 内容描述：
 * 方法描述：该类有 个方法
 * 01
 *
 * @authot QJ
 */
@Controller
@RequestMapping(value = "/logisticsVehicleManager")
public class LogisticsVehicleController {
    Logger logger = Logger.getLogger(LogisticsVehicleController.class);
    @Value("#{setting[baseUrl]}")
    private String baseUrl;
    @Resource
    private VehicleService vehicleService;
    @Resource
    private CompanyService companyService;
    @Resource
    private TruckService truckService;

    /**
     * 方法名称：vehicleManager_home
     * 内容摘要：物流公司车辆管理页面。
     *
     * @param model model
     * @return string 物流公司管理页面
     */
    @RequestMapping(value = "home")
    public String vehicleManager_home(ModelMap model) {
        return "operationManager/logisticsVehicleManager/logisticsVehicleManager";
    }

    /**
     * 方法名称：vehicleList
     * 内容摘要：查询物流公司下的车辆列表。
     */
    @RequestMapping(value = "/vehicleList")
    public void vehicleList(HttpServletRequest request, HttpServletResponse response,
                            @RequestParam(required = false, defaultValue = "") String plate_number,
                            @RequestParam(required = false, defaultValue = "") String truck_carriage_type,
                            @RequestParam(required = false, defaultValue = "") String truck_brand,
                            @RequestParam(required = false, defaultValue = "") String truck_model,
                            @RequestParam(required = false, defaultValue = "") String owner_member,
                            @RequestParam(required = false, defaultValue = "") String owner_name,
                            @RequestParam(required = false, defaultValue = "") String owner_phone,
                            @RequestParam(required = false, defaultValue = "") String owner_id,
                            ModelMap model) {

        List<T_Data_Logistics_Vehicle> list = new ArrayList<T_Data_Logistics_Vehicle>();
        HashMap<String, String> conditions = new HashMap<String, String>();

        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            conditions.put("plate_number", plate_number);               // 车牌号
            conditions.put("truck_carriage_type", truck_carriage_type); // 车厢类型
            conditions.put("truck_brand", truck_brand);                 // 车辆品牌
            conditions.put("truck_model", truck_model);                 // 车辆型号
            conditions.put("owner_member", owner_member);               // 有无车辆管理者
            conditions.put("owner_name", owner_name);                   // 车辆管理者姓名
            conditions.put("owner_phone", owner_phone);                 // 车辆管理者手机号
            conditions.put("owner_id", owner_id);                       // 车辆管理者身份证号
            conditions.put("username", username);                       // 当前登录帐户

            list = vehicleService.findCompanyVehicleList(conditions);
            ResponseUtil.outWrite(response, JSONUtil.toJSONString(list));
        } catch (Exception e) {
            logger.error(TruckManager_Message.searchErr + e.getMessage());
        }
    }

    /**
     * 方法名称:saveTruckInfo
     * 方法描述：保存物流公司的卡车信息
     *
     * @return
     */
    @RequestMapping(value = "saveTruckInfo")
    @ResponseBody
    @Transactional
    public T_Data_JsonResult saveTruckInfo(@RequestParam("add_driving_licence_first_page_save_path") MultipartFile driving_licence_first_page,
                                           @RequestParam("add_driving_licence_second_page_save_path") MultipartFile driving_licence_second_page,
                                           @RequestParam("add_truck_first_pic_save_path") MultipartFile truck_first_pic,
                                           @RequestParam("add_truck_second_pic_save_path") MultipartFile truck_second_pic,
                                           @RequestParam("add_truck_third_pic_save_path") MultipartFile truck_third_pic,
                                           HttpServletRequest request, HttpServletResponse response, HttpSession session,
                                           ModelMap model) {
        T_Data_JsonResult jsonResult = new T_Data_JsonResult();
        String truckInfo = request.getParameter("truckInfo");
        String domainPath = request.getSession().getServletContext().getRealPath("/");
        domainPath = domainPath.substring(0, domainPath.lastIndexOf(File.separator));
        domainPath = domainPath.substring(0, domainPath.lastIndexOf(File.separator));
        String baseUrl = domainPath + File.separator + this.baseUrl;
        String driving_licence_first_page_save_path = null;
        String driving_licence_second_page_save_path = null;
        String truck_first_pic_save_path = null;
        String truck_second_pic_save_path = null;
        String truck_third_pic_save_path = null;
        HashMap picPathMap = new HashMap();
        int flag = 0;

        try {
            File fileUp = new File(baseUrl + "/TruckPic");
            if (!driving_licence_first_page.isEmpty() && !driving_licence_second_page.isEmpty() &&
                    !truck_first_pic.isEmpty() && !truck_second_pic.isEmpty() && !truck_third_pic.isEmpty()) {
                // 驾驶证第一页
                String[] split_driving_licence_first_page = (driving_licence_first_page.getOriginalFilename()).split("\\.");
                String driving_licence_first_page_type = split_driving_licence_first_page[1];
                // 驾驶证第二页
                String[] split_driving_licence_second_page = (driving_licence_second_page.getOriginalFilename()).split("\\.");
                String driving_licence_second_page_type = split_driving_licence_second_page[1];
                // 车辆照片1（左侧面）
                String[] split_truck_first_pic = (truck_first_pic.getOriginalFilename()).split("\\.");
                String truck_first_pic_type = split_truck_first_pic[1];
                // 车辆照片2（右侧面）
                String[] split_truck_second_pic = (truck_second_pic.getOriginalFilename()).split("\\.");
                String truck_second_pic_type = split_truck_second_pic[1];
                // 车辆照片3（正后面）
                String[] split_truck_third_pic = (truck_third_pic.getOriginalFilename()).split("\\.");
                String truck_third_pic_type = split_truck_third_pic[1];
                if (!fileUp.exists()) {
                    fileUp.mkdirs();
                } else {
                    // 驾驶证第一页
                    driving_licence_first_page_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + driving_licence_first_page_type;
                    // 驾驶证第二页
                    driving_licence_second_page_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + driving_licence_second_page_type;
                    // 车辆照片1（左侧面）
                    truck_first_pic_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + truck_first_pic_type;
                    // 车辆照片2（右侧面）
                    truck_second_pic_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + truck_second_pic_type;
                    // 车辆照片3（正后面）
                    truck_third_pic_save_path = "/TruckPic/" + RadomUtil.getOrderNo() + "." + truck_third_pic_type;
                    // 上传
                    driving_licence_first_page.transferTo(new File(baseUrl + driving_licence_first_page_save_path));
                    driving_licence_second_page.transferTo(new File(baseUrl + driving_licence_second_page_save_path));
                    truck_first_pic.transferTo(new File(baseUrl + truck_first_pic_save_path));
                    truck_second_pic.transferTo(new File(baseUrl + truck_second_pic_save_path));
                    truck_third_pic.transferTo(new File(baseUrl + truck_third_pic_save_path));
                    // 将照片路径封装到picPath对象中
                    picPathMap.put("driving_licence_first_page_save_path", driving_licence_first_page_save_path);
                    picPathMap.put("driving_licence_second_page_save_path", driving_licence_second_page_save_path);
                    picPathMap.put("truck_first_pic_save_path", truck_first_pic_save_path);
                    picPathMap.put("truck_second_pic_save_path", truck_second_pic_save_path);
                    picPathMap.put("truck_third_pic_save_path", truck_third_pic_save_path);
                }
                String username = String.valueOf(request.getSession().getAttribute("username"));
                flag = this.vehicleService.saveTruckInfo(truckInfo, username, picPathMap);
                jsonResult.setResult(flag);
            }
        } catch (Exception e) {
            logger.info(MessageUtil.saveInfoError + e.getMessage());
            flag = Integer.parseInt(e.getMessage());
            jsonResult.setResult(flag);
        }
        logger.info("flag=" + flag);
        return jsonResult;
    }

    /**
     * 方法名称：vehicleDriverList
     * 内容摘要：查询物流公司下无车辆的司机列表（去除车辆管理者）
     */
    @RequestMapping(value = "/vehicleDriverList")
    public void vehicleDriverList(HttpServletRequest request, HttpServletResponse response,
                                  @RequestParam(required = false, defaultValue = "") String person_name,
                                  @RequestParam(required = false, defaultValue = "") String person_mobile_phone,
                                  @RequestParam(required = false, defaultValue = "") String id_card_number,
                                  ModelMap model) {

        List<T_Data_Company_Vehicle_Driver> list = new ArrayList<T_Data_Company_Vehicle_Driver>();
        HashMap<String, String> conditions = new HashMap<String, String>();

        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            conditions.put("person_name", person_name);                 // 司机姓名
            conditions.put("person_mobile_phone", person_mobile_phone); // 司机手机
            conditions.put("id_card_number", id_card_number);           // 司机身份证号
            conditions.put("username", username);                       // 当前登录帐户

            list = vehicleService.findCompanyVehicleDriverList(conditions);
            ResponseUtil.outWrite(response, JSONUtil.toJSONString(list));
        } catch (Exception e) {
            logger.error(TruckManager_Message.searchErr + e.getMessage());
        }
    }

    /**
     * 方法名称：vehicleDriverAndManagerList
     * 内容摘要：查询物流公司下无车辆的司机和车辆管理者列表。
     */
    @RequestMapping(value = "/vehicleDriverAndManagerList")
    public void vehicleDriverAndManagerList(HttpServletRequest request, HttpServletResponse response,
                                  @RequestParam(required = false, defaultValue = "") String person_name,
                                  @RequestParam(required = false, defaultValue = "") String person_mobile_phone,
                                  @RequestParam(required = false, defaultValue = "") String id_card_number,
                                  ModelMap model) {

        List<T_Data_Company_Vehicle_Driver> list = new ArrayList<T_Data_Company_Vehicle_Driver>();
        HashMap<String, String> conditions = new HashMap<String, String>();

        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            conditions.put("person_name", person_name);                 // 司机姓名
            conditions.put("person_mobile_phone", person_mobile_phone); // 司机手机
            conditions.put("id_card_number", id_card_number);           // 司机身份证号
            conditions.put("username", username);                       // 当前登录帐户

            list = vehicleService.findCompanyVehicleDriverAndManagerList(conditions);
            ResponseUtil.outWrite(response, JSONUtil.toJSONString(list));
        } catch (Exception e) {
            logger.error(TruckManager_Message.searchErr + e.getMessage());
        }
    }

    /**
     * 方法名称：logisticsVehicleDriverSetUp
     * 内容摘要：设定为车组成员。
     *
     * @param request  request
     * @param response response
     */
    @RequestMapping(value = "logisticsVehicleDriverSetUp")
    @ResponseBody
    @Transactional
    public T_Data_JsonResult logisticsVehicleDriverSetUp(@RequestParam("person_mobile_phones") String person_mobile_phones,
                                                         @RequestParam("plate_number") String plate_number,
                                                         HttpServletRequest request, HttpServletResponse response, ModelMap model) {
        String[] person_mobile_phone = person_mobile_phones.split(",");
        T_Data_JsonResult result = new T_Data_JsonResult();
        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            for (int i = 0; i < person_mobile_phone.length; i++) {
                vehicleService.logisticsVehicleDriverSetUp(person_mobile_phone[i], plate_number, username);
            }
            result.setResult(0);
        } catch (Exception e) {
            logger.error(MessageUtil.delInfoError + e.getMessage());
            result.setResult(1);
        }
        return result;
    }

    /**
     * 方法名称：logisticsVehicleManagerSetUp
     * 内容摘要：设定为车辆管理者。
     *
     * @param request  request
     * @param response response
     */
    @RequestMapping(value = "logisticsVehicleManagerSetUp")
    @ResponseBody
    @Transactional
    public T_Data_JsonResult logisticsVehicleManagerSetUp(@RequestParam("person_mobile_phone") String person_mobile_phone,
                                                         @RequestParam("plate_number") String plate_number,
                                                         HttpServletRequest request, HttpServletResponse response, ModelMap model) {
        T_Data_JsonResult result = new T_Data_JsonResult();
        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            vehicleService.logisticsVehicleManagerSetUp(person_mobile_phone, plate_number, username);
            result.setResult(0);
        } catch (Exception e) {
            logger.error(MessageUtil.delInfoError + e.getMessage());
            result.setResult(1);
        }
        return result;
    }

    /**
     * 方法名称：logisticsVehicleUnbound
     * 内容摘要：物流公司解绑车辆。
     *
     * @param request  request
     * @param response response
     */
    @RequestMapping(value = "logisticsVehicleUnbound")
    @ResponseBody
    @Transactional
    public T_Data_JsonResult logisticsVehicleUnbound(@RequestParam("plate_number") String plate_number,
                                                     HttpServletRequest request, HttpServletResponse response, ModelMap model) {
        T_Data_JsonResult jsonResult = new T_Data_JsonResult();
        int flag = 0;
        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            flag = this.vehicleService.logisticsVehicleUnbound(plate_number, username);
        } catch (Exception e) {
            e.getMessage();
            flag = Integer.parseInt(e.getMessage());
        }
        // 判断是否成功
        if (flag == 1) {
            jsonResult.setResult(1);
        }
        // 判断是否数据失败
        else if (flag == 0) {
            jsonResult.setResult(0);
        }
        // 判断是否有未完成派单
        else if (flag == 2) {
            jsonResult.setResult(2);
        } else {
            jsonResult.setResult(3);
        }
        return jsonResult;
    }

    /**
     * 方法名称：logisticsVehicleManagerUnbound
     * 内容摘要：车辆管理者解绑车辆。
     *
     * @param request  request
     * @param response response
     */
    @RequestMapping(value = "logisticsVehicleManagerUnbound")
    @ResponseBody
    @Transactional
    public T_Data_JsonResult logisticsVehicleManagerUnbound(@RequestParam("plate_number") String plate_number,
                                                     HttpServletRequest request, HttpServletResponse response, ModelMap model) {
        T_Data_JsonResult jsonResult = new T_Data_JsonResult();
        int flag = 0;
        try {
            String username = String.valueOf(request.getSession().getAttribute("username"));
            flag = this.vehicleService.logisticsVehicleManagerUnbound(plate_number, username);
        } catch (Exception e) {
            e.getMessage();
            flag = Integer.parseInt(e.getMessage());
        }
        // 判断是否成功
        if (flag == 1) {
            jsonResult.setResult(1);
        }
        // 判断是否数据失败
        else if (flag == 0) {
            jsonResult.setResult(0);
        }
        // 判断是否有未完成派单
        else if (flag == 2) {
            jsonResult.setResult(2);
        } else {
            jsonResult.setResult(3);
        }
        return jsonResult;
    }
}